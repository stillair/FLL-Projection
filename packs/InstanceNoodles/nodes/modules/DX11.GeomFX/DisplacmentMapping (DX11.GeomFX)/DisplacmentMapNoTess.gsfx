#include "..\..\Common\InstanceNoodles.fxh"
iGeomIndex DisplacmentIndexing <string linkclass="Instance,Primitive,Vertex";>;
iGeomIndex AxisIndexing <string linkclass="Instance,Primitive,Vertex";>;

bool flatNormals;
StructuredBuffer<float> iidb;
float strength = 1;
StructuredBuffer<float> strengthBuffer;
float3 axisDefault;
StructuredBuffer<float3> axisBuffer;

float4x4 tTex <string uiname="Texture Transform"; bool uvspace=true; >;
StructuredBuffer<float4x4>  btTex <string uiname="Texture Transform Buffer"; bool uvspace=true; >;

float displacementNormalInfluence = 1.0f;


//Control Texture Array
Texture2DArray cTex <string uiname="Texture";>;
//Texture2DArray nTex <string uiname="NormalMap";>;
SamplerState sam
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};

float controlTexSample(float2 uv, float iid)
{
	uint w,h,textureCount;
	cTex.GetDimensions(w,h,textureCount);
	float3 coords = float3(uv, iid % textureCount);
	return cTex.SampleLevel(sam,coords,0).x;
}

float3 DisplacedNormal(float3 norm, float4 nsew, float me, float am)
{              
	
	//find perpendicular vector to norm:        
	float3 temp = norm; //a temporary vector that is not parallel to norm
	if(norm.x==1)
		temp.y+=0.5;
	else
		temp.x+=0.5;
	
	//form a basis with norm being one of the axes:
	float3 perp1 = normalize(cross(norm,temp));
	float3 perp2 = normalize(cross(norm,perp1));
	
	//use the basis to move the normal in its own space by the offset        
	float3 normalOffset = -am*(((nsew.x-me)-(nsew.y-me))*perp1 + ((nsew.z-me)-(nsew.w-me))*perp2);
	return normalize(norm + normalOffset);
}
float3 SampleArrayNormal(float3 norm, Texture2DArray disp, sampler sS, float2 uv, float i, float2 ww, float am, float LOD)
{
	float me = controlTexSample(uv, i).x;
	float n = controlTexSample(float2(uv.x,uv.y+ww.y), i).x;
	float s = controlTexSample(float2(uv.x,uv.y-ww.y), i).x;
	float e = controlTexSample(float2(uv.x+ww.x,uv.y), i).x;
	float w = controlTexSample(float2(uv.x-ww.x,uv.y), i).x;
	
	return DisplacedNormal(norm, float4(n,s,e,w), me, am);
}



struct VS_IN
{
	float4 PosO:POSITION;
	float4 TexCd:TEXCOORD0;
	float3 Norm:NORMAL0;
	uint vid : SV_VertexID ;
};

struct VS_OUT
{
	float4 Pos:SV_POSITION;
	float3 Norm:NORMAL0;
	float4 TexCd:TEXCOORD0;
};


VS_OUT VSnorm(VS_IN In){
	VS_OUT Out=(VS_OUT)0;
	
	uint iid = iidb[In.vid];
	
	uint w,h,textureCount;
	cTex.GetDimensions(w,h,textureCount);
	
	float2 wh = float2(0.0039, 0.0039);
	float4 p=In.PosO;
	float3 n = In.Norm;
	float pamount = bLoad(strengthBuffer, strength, DisplacmentIndexing.Get(iid, floor(In.vid/3), In.vid));
	float amount = pamount * controlTexSample(mul(In.TexCd, bLoad(btTex, tTex, iid)).xy,iid).x;
	
	Out.Pos.xyz = p.xyz + (n * amount);
	Out.Norm = SampleArrayNormal(n, cTex, sam, mul(In.TexCd, bLoad(btTex, tTex, iid)).xy, iid, wh, pamount * displacementNormalInfluence, 0);
	Out.TexCd = In.TexCd;
	
	return Out;
}

VS_OUT VSrgb(VS_IN In){
	VS_OUT Out=(VS_OUT)0;
	
	uint iid = iidb[In.vid];
	
	float4 p=In.PosO;
	
	uint w,h,textureCount;
	cTex.GetDimensions(w,h,textureCount);
	float3 coords = float3(In.TexCd.xy, iid % textureCount);
	float3 n = cTex.SampleLevel(sam,coords,0).xyz;
	
	
	//float3 n = controlTexSample(mul(In.TexCd, bLoad(btTex, tTex, iid)).xy,iid);
	
	
	float amount = bLoad(strengthBuffer, strength, DisplacmentIndexing.Get(iid, floor(In.vid/3), In.vid));
	Out.Norm = In.Norm;
	Out.Pos.xyz=p+(n* amount);
	Out.TexCd=In.TexCd;
	
	return Out;
}

VS_OUT VSaxis(VS_IN In){
	VS_OUT Out=(VS_OUT)0;
	
	uint iid = iidb[In.vid];
	
	float4 p=In.PosO;
	float3 n =  bLoad(axisBuffer, axisDefault, AxisIndexing.Get(iid, floor(In.vid/3), In.vid));
	float amount = bLoad(strengthBuffer, strength, DisplacmentIndexing.Get(iid, floor(In.vid/3), In.vid));
	amount *= controlTexSample(mul(In.TexCd, bLoad(btTex, tTex, iid)).xy,iid).x;
	Out.Norm = In.Norm;
	Out.Pos.xyz=p+(n* amount);
	Out.TexCd=In.TexCd;
	
	return Out;
}


[maxvertexcount(3)]
void GS(triangle VS_OUT In[3], inout TriangleStream<VS_OUT> GSOut)
{
	VS_OUT o;
	
	if(flatNormals)
	{
		//Get triangle face direction
		float3 f1 = In[1].Pos.xyz - In[0].Pos.xyz;
   		 float3 f2 = In[2].Pos.xyz - In[0].Pos.xyz;
    
		//Compute flat normal
		float3 norm = normalize(cross(f1, f2));
	
		for(int i=0;i<3;i++)
		{
			o=In[i];
			o.Norm = norm;
			GSOut.Append(o);
		}
	}
	else
	{
		for(int i=0;i<3;i++)
		{
			o=In[i];
			GSOut.Append(o);
		}
	}
}



GeometryShader StreamOutFlatNorm = ConstructGSWithSO(CompileShader(gs_5_0, GS()), "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy" );


technique10 DisplacementByNormals
{
	pass P0
	{
		SetVertexShader(CompileShader(vs_5_0, VSnorm()));
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
		SetGeometryShader(StreamOutFlatNorm);
	}
}

technique10 DisplacementByRGB
{
	pass P0
	{
		SetVertexShader(CompileShader(vs_5_0, VSrgb()));
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
		SetGeometryShader(StreamOutFlatNorm);
	}
}

technique10 DisplacementByAxis
{
	pass P0
	{
		SetVertexShader(CompileShader(vs_5_0, VSaxis()));
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
		SetGeometryShader(StreamOutFlatNorm);
	}
}
