float4x4 tV ;
float4x4 tIV ;


float2 center;
float par1,par2;
float eps <string uiname="Epsilon";> =0.01;

float3x3 lookat(float3 dir,float3 up=float3(0,1,0)){float3 z=normalize(dir);float3 x=normalize(cross(up,z));float3 y=normalize(cross(z,x));return float3x3(x,y,z);} 



interface ifunction
{
	float2 Distort(float2 pos);
};

class cFisheye : ifunction
{
	float2 Distort(float2 pos)
	{
		pos += center;	
		//Convert to polar coordinatess
		float r = length(pos);
		float phi = atan2(pos.y, pos.x);
		// Effect function: FishEye
		r = pow(r, par1) / sqrt(2.0);
		// Convert back to cartesian coordinates
		pos.x = r * cos(phi);
		pos.y = r * sin(phi);
		pos -= center;
		return pos;
	}
};



class cSqueeze : ifunction
{
	float2 Distort(float2 pos)
	{
		pos += center;	
		//Convert to polar coordinatess
		float r = length(pos);
		float phi = atan2(pos.y, pos.x);
		// Effect function: squeeze
 		r = pow(r, 1.0/par1) * par2;
		// Convert back to cartesian coordinates
		pos.x = r * cos(phi);
		pos.y = r * sin(phi);
		pos -= center;
		return pos;
	}
};

class cTwirl : ifunction
{
	float2 Distort(float2 pos)
	{
		pos += center;
		//Convert to polar coordinatess
		float r = length(pos);
		float phi = atan2(pos.y, pos.x);
		// Effect function: Twirl
		phi = phi + (1.0 - smoothstep(-par1, par1, r)) * par2;
		// Convert back to cartesian coordinates
		pos.x = r * cos(phi);
		pos.y = r * sin(phi);
		pos -= center;
		return pos;	
	}
};

class cBulge : ifunction
{
	float2 Distort(float2 pos)
	{
		pos += center;
		//Convert to polar coordinatess
		float r = length(pos);
		float phi = atan2(pos.y, pos.x);
		// Effect function: Bulge
		r = r * smoothstep(par1, par2, r);
		// Convert back to cartesian coordinates
		pos.x = r * cos(phi);
		pos.y = r * sin(phi);
		pos -= center;
		return pos;		
	}
};

class cDent : ifunction
{
	float2 Distort(float2 pos)
	{
		pos += center;
		//Convert to polar coordinatess
		float r = length(pos);
		float phi = atan2(pos.y, pos.x);
		// Effect function: Dent
		r = 2.0 * r - r * smoothstep(par1, par2, r);
		// Convert back to cartesian coordinates
		pos.x = r * cos(phi);
		pos.y = r * sin(phi);
		pos -= center;
		return pos;		
	}
};


class cStretch : ifunction
{
	float2 Distort(float2 pos)
	{
		pos += center;

// Effect function: Stretch
		float2 s = sign(pos);
		pos = abs(pos);
		pos = 0.5 * pos + 0.5 * smoothstep(par1, par2, pos + center) * pos;
		pos = s * pos;

		pos -= center;
		return pos;		
	}
};


cFisheye Fisheye;
cSqueeze Squeeze;
cTwirl Twirl;
cBulge Bulge;
cDent Dent;
cStretch Stretch;


ifunction function<string linkclass="Fisheye,Squeeze,Twirl,Bulge,Dent,Stretch";>;

float3 dist( float3 pos)
	{
	float4 p = mul(float4(pos,1),tV);
	p.xy = function.Distort(p.xy);
	p = mul(p, tIV);
	return p.xyz;
	}

//----------------------

float3 distnorm(inout float3 pos,float3 n,float eps){
	float3x3 lkt=lookat(n);
	
	float3 v1=float3(1,0,0);
	float3 v2=float3(0,0,1);
	
	v1=normalize(mul(v1,(lkt)));
	v2=normalize(cross(n,v1));
	
	float3 p0=pos.xyz;
	float3 p1=p0+v1*eps;
	float3 p2=p0+v2*eps;
	//float3 p3=p0-v1*eps;
	//float3 p4=p0-v2*eps;
	
	p0=dist(p0);
	p1=dist(p1);
	p2=dist(p2);
	//p3=dist(p4,n);
	//p4=dist(p4,n);
	
	
	v1=normalize(p1-p0);
	v2=normalize(p2-p0);
	pos.xyz=p0;
	n = normalize(cross(v1,v2));
	return normalize(cross(v1,v2));
}

//----------------------

struct vsin
{
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float2 TexCd : TEXCOORD0;
	
};



vsin VS(vsin input)
{	
   
	vsin o;

	/*
	float4 pos = mul(input.pos,tV);
	pos.xy = function.Distort(pos.xy);
	pos = mul(pos, tIV);
	*/
	
	float3 pos = input.pos.xyz;
	float3 n = input.norm;
	n = distnorm(pos,n,eps);
	
	o.pos = float4(pos.xyz,1);
	o.norm =n;
	o.TexCd = input.TexCd;
	
	
	return o;
	
}

// need a seperate GS for interface in VS to work for some reason...
[maxvertexcount(3)]
void GsStream(triangle vsin input[3], inout TriangleStream<vsin>GSOut)
{
	vsin v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		//v.position=v.position;
        //v.TexCd=v.TexCd;
		//v.normV=v.normV;
		GSOut.Append(v);
	}
}


GeometryShader Stream = ConstructGSWithSO( CompileShader( gs_5_0, GsStream() ), "POSITION.xyz;NORMAL.xyz;TEXCOORD0.xy" );

technique11 Distort
{
    pass PP2
    {
        SetVertexShader( CompileShader( vs_5_0, VS() ) );
    	SetGeometryShader( CompileShader( gs_5_0, GsStream() ) );
        SetGeometryShader( Stream );
    }  
}



	

	



