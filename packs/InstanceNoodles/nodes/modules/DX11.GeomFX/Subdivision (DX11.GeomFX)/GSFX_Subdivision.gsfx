#include <packs\InstanceNoodles\nodes\modules\Common\InstanceNoodles.fxh>

#ifndef MAX_ITERATIONS
#define MAX_ITERATIONS 5
#endif

StructuredBuffer<float> iidb;

float subdivisionDefualt;
StructuredBuffer<float> subdivisionBuffer;
iGeomIndex subdivisionIndexing <string linkclass="Instance,Primitive";>;
//Control Texture Array
Texture2DArray cTex <string uiname="Texture";>;
SamplerState sam
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};

float controlTexSample(float2 uv, float iid)
{
	uint w,h,textureCount;
	cTex.GetDimensions(w,h,textureCount);
	float3 coords = float3(uv, iid % textureCount);
	return cTex.SampleLevel(sam,coords,0).x;
}

struct VS_IN
{
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float2 uv : TEXCOORD0;
	uint vid : SV_VertexID ;
};

struct VS_OUTPUT
{
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float2 uv : TEXCOORD0;
	uint iid : IID;
};


VS_OUTPUT VS(VS_IN input)
{
	VS_OUTPUT o;
	o.pos = input.pos;
	o.norm = input.norm;
	o.uv=input.uv;
	o.iid = iidb[input.vid];
    return o;
}




// https://stackoverflow.com/questions/13794814/hlsl-modify-tessellation-shader-to-make-equilateral-triangles


void DrawTriangle(float4 p0, float4 p1, float4 p2, float2 uv0, float2 uv1, float2 uv2, inout TriangleStream<VS_OUTPUT> stream)
{
    VS_OUTPUT v0 = (VS_OUTPUT)0;
    v0.pos = p0;
	//v0.norm = 0;
	v0.uv = uv0;
	//v0.iid = 0;
    stream.Append(v0);

    VS_OUTPUT v1 = (VS_OUTPUT)0;
    v1.pos = p1;
	v1.uv = uv1;
    stream.Append(v1);

    VS_OUTPUT v2 = (VS_OUTPUT)0;
    v2.pos = p2;
	v2.uv = uv2;
    stream.Append(v2);

    stream.RestartStrip();
}



[maxvertexcount(96)] // directx rule: maxvertexcount * sizeof(VS_OUT) <= 1024
void GS_SD(triangle VS_OUTPUT input[3], inout TriangleStream<VS_OUTPUT> stream, uint pid : SV_PrimitiveID)
{
	
	uint iid = input[0].iid;
	float subdivisionIndex = subdivisionIndexing.Get(iid, pid, 0);
		float2 avgtxcd = 0;
	for(uint i=0; i<3; i++) avgtxcd += (input[i].uv)/3;
	
	float amt = bLoad(subdivisionBuffer, subdivisionDefualt, subdivisionIndex);
	amt *= controlTexSample(avgtxcd, iid);
	amt = saturate(amt);
	amt *= MAX_ITERATIONS;
	amt +=1;
	
    int itc = min(amt, MAX_ITERATIONS);
    float fitc = itc;
    float4 past_pos[MAX_ITERATIONS];
    float4 array_pass[MAX_ITERATIONS];
	float2 pastUV[MAX_ITERATIONS];
	float2 array_UVpass[MAX_ITERATIONS];
	
	
    for (int pi = 0; pi < MAX_ITERATIONS; pi++)
    {
        past_pos[pi] = float4(0, 0, 0, 0);
        array_pass[pi] = float4(0, 0, 0, 0);
    }
    // -------------------------------------
    // Tessellation kernel for the control points
    for (int x = 0; x <= itc; x++)
    {
        float4 lastPOS;
    	float2 lastUV;
        for (int y = 0; y <= x; y++)
        {
            float2 seg = float2(x / fitc, y / fitc);
            float3 uv;
            uv.x = 1 - seg.x;
            uv.z = seg.y;
            uv.y = 1 - (uv.x + uv.z);

            // ---------------------------------------
            // Domain Stage
            // uv           Domain Location
            // x,y          IterationIndex

            float4 fpos = input[0].pos * uv.x;
            fpos += input[1].pos * uv.y;
            fpos += input[2].pos * uv.z;
        	
            if (x > 0 && y > 0)
            {
                DrawTriangle(past_pos[y - 1], lastPOS, fpos, input[0].uv, input[1].uv, input[2].uv, stream);
                if (y < x)
                {
                    // add adjacent triangle
                    DrawTriangle(past_pos[y - 1], fpos, past_pos[y], input[0].uv, input[1].uv, input[2].uv, stream);
                }
            }
            array_pass[y] = fpos;
            lastPOS = fpos;

        	
        }
        for (int i = 0; i < MAX_ITERATIONS; i++)
        {
            past_pos[i] = array_pass[i];
        }
    }
}

/*
[maxvertexcount(3)]
void GS(triangle VS_OUTPUT input[3], inout TriangleStream<VS_OUTPUT> gsout, uint pid : SV_PrimitiveID)
{
	VS_OUTPUT elem = (VS_OUTPUT)0;
	elem.pos.w=1.0;
	
	uint iid = input[0].iid;
	
	float shrinkIndex = shrinkIndexing.Get(iid, pid, 0);
		float2 avgtxcd = 0;
	for(uint i=0; i<3; i++) avgtxcd += (input[i].uv)/3;
	
	float amt = bLoad(shrinkBuffer, shrinkDefualt, shrinkIndex);
	amt *= controlTexSample(avgtxcd, iid);
	amt = saturate(amt);
	
	//float amt = shrinkDefualt;
	
	float3 ce = (input[0].pos.xyz + input[1].pos.xyz + input[2].pos.xyz) / 3.0f;
	//pos from center;
	float3 innerP1 = lerp(input[0].pos.xyz, ce, amt);
	float3 innerP2 = lerp(input[1].pos.xyz, ce, amt);
	float3 innerP3 = lerp(input[2].pos.xyz, ce, amt);
	
	//Get triangle face direction
	float3 f1 = input[1].pos.xyz - input[0].pos.xyz;
    float3 f2 = input[2].pos.xyz - input[0].pos.xyz;
    
	//Compute flat normal
	elem.norm = normalize(cross(f1, f2));
    
	elem.pos.xyz = innerP1;
	elem.uv = input[0].uv;
	gsout.Append(elem);
	
	elem.pos.xyz = innerP2;
	elem.uv = input[1].uv;
	gsout.Append(elem);
	
	elem.pos.xyz = innerP3;
	elem.uv = input[2].uv;
	gsout.Append(elem);

	gsout.RestartStrip();
}
*/

GeometryShader gsStreamOut = ConstructGSWithSO(CompileShader(gs_5_0, GS_SD()), "POSITION.xyzw; NORMAL.xyz; TEXCOORD.xy", NULL, NULL, NULL, -1);
technique10 PassMesh
{
    pass P0
    {
        SetVertexShader(CompileShader(vs_5_0, VS()));
        SetGeometryShader(gsStreamOut);
    }  
}


