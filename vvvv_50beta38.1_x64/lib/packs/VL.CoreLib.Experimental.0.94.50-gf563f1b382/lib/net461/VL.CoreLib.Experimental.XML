<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.CoreLib.Experimental</name>
    </assembly>
    <members>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try2``2(System.Func{System.Tuple{``0,``1}},``0,``1,``0@,``1@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 2 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch2``2(System.Func{System.Tuple{``0,``1}},System.Func{System.Exception,System.Tuple{``0,``1}},``0@,``1@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 2 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally2``4(System.Func{System.Tuple{``2,``3}},System.Func{System.Exception,System.Tuple{``2,``3}},System.Func{System.Tuple{``2,``3},System.Tuple{``0,``1}},``0@,``1@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 2 regular outputs
            </summary>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try3``3(System.Func{System.Tuple{``0,``1,``2}},``0,``1,``2,``0@,``1@,``2@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 3 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch3``3(System.Func{System.Tuple{``0,``1,``2}},System.Func{System.Exception,System.Tuple{``0,``1,``2}},``0@,``1@,``2@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 3 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally3``6(System.Func{System.Tuple{``3,``4,``5}},System.Func{System.Exception,System.Tuple{``3,``4,``5}},System.Func{System.Tuple{``3,``4,``5},System.Tuple{``0,``1,``2}},``0@,``1@,``2@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 3 regular outputs
            </summary>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try4``4(System.Func{System.Tuple{``0,``1,``2,``3}},``0,``1,``2,``3,``0@,``1@,``2@,``3@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 4 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch4``4(System.Func{System.Tuple{``0,``1,``2,``3}},System.Func{System.Exception,System.Tuple{``0,``1,``2,``3}},``0@,``1@,``2@,``3@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 4 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally4``8(System.Func{System.Tuple{``4,``5,``6,``7}},System.Func{System.Exception,System.Tuple{``4,``5,``6,``7}},System.Func{System.Tuple{``4,``5,``6,``7},System.Tuple{``0,``1,``2,``3}},``0@,``1@,``2@,``3@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 4 regular outputs
            </summary>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try5``5(System.Func{System.Tuple{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4,``0@,``1@,``2@,``3@,``4@,System.Boolean@,System.String@)">
            ---------------------------------------------------------------------------------------------------------
            TRY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not. Supports 5 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch5``5(System.Func{System.Tuple{``0,``1,``2,``3,``4}},System.Func{System.Exception,System.Tuple{``0,``1,``2,``3,``4}},``0@,``1@,``2@,``3@,``4@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Supports 5 regular outputs
            </summary> 
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally5``10(System.Func{System.Tuple{``5,``6,``7,``8,``9}},System.Func{System.Exception,System.Tuple{``5,``6,``7,``8,``9}},System.Func{System.Tuple{``5,``6,``7,``8,``9},System.Tuple{``0,``1,``2,``3,``4}},``0@,``1@,``2@,``3@,``4@)">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards. Supports 5 regular outputs
            </summary>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.Try``1(System.Func{``0},``0,System.Boolean@,System.String@)">
            <summary>
            Runs the given stateless patch and returns whether it has been successful or not
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="try"></param>
            <param name="defaultOutput"></param>
            <param name="success"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatch``1(System.Func{``0},System.Func{System.Exception,``0})">
            <summary>
            Runs the given stateless patch, runs catch instead if it has been unsuccessful
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="try"></param>
            <param name="catch"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Control.TryCatchUtils.TryCatchFinally``2(System.Func{``0},System.Func{System.Exception,``0},System.Func{``0,``1})">
            <summary>
            Runs the given stateless patch, runs Catch instead if it has been unsuccessful. Guarantees to run Finally afterwards
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="try"></param>
            <param name="catch"></param>
            <param name="finally"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Control.TryStateful2`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 2 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful2`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 2 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful2`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 2
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 2 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful3`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 3 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful3`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 3 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful3`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 3
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 3 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful4`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 4 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful4`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 4 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful4`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 4
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 4 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful5`1">
            ---------------------------------------------------------------------------------------------------------
            TRY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch and returns whether it has been successful or not. Supports 5 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful5`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCH 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 5 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful5`1">
            ---------------------------------------------------------------------------------------------------------
            TRYCATCHFINALLY 5
            ---------------------------------------------------------------------------------------------------------
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Supports 5 regular output pins
            </summary>
        </member>
        <member name="T:VL.Lib.Control.TryStateful`1">
            <summary>
            Runs the given patch and returns whether it has been successful or not
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="T:VL.Lib.Control.TryCatchStateful`1">
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="T:VL.Lib.Control.TryCatchFinallyStateful`1">
            <summary>
            Runs the given patch, runs catch instead if it has been unsuccessful. Guarantees to run Finally afterwards
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="T:VL.Lib.IO.Net.HTTPServer">
            <summary>
            From https://gist.github.com/zezba9000/04054e3128e6af413e5bc8002489b2fe
            In order to work on needs to execute as admin:
            netsh http add urlacl url=http://+:80/ user=username
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Socket.SocketProvider">
            <summary>
            Returns a very basic socket type
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Socket.TCPClientSocket">
            <summary>
            Returns socket configured as TCP Client
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Socket.TCPServerSocket">
            <summary>
            Creates a TCP server socket
            </summary>
        </member>
        <member name="M:VL.Lib.Audio.AudioEngineManager.AquireEngine">
            <summary>
            Gets the audio engine singleton and increases the reference count
            </summary>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Audio.AudioEngineManager.ReleaseEngine">
            <summary>
            Decrement reference count and release audio engine if no one references it anymore
            </summary>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Parallel.ForEach`1">
            <summary>
            A loop region with one input and one output which runs in parallel.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.BusyWaitTimerObservable">
            <summary>
            Timer using the busy wait method, extremely accurate but uses 100% of one core. But hey... don't you have enough of them?
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Update(System.Single@,System.Single,System.Int32,VL.Lib.Reactive.TimerMode,System.Boolean,System.Boolean)">
            <summary>
            Updates the timer properties.
            </summary>
            <param name="period">The period time in milliseconds. Values smaller than 1 are possible.</param>
            <param name="waitAccuracy">Helps to save CPU power for period times higher than this value. It is the start of the busy wait phase before the peroid end in milliseconds. Before that Thread.Sleep(1) is called periodically, the precision of Thread.Spleep(1) depends on the current windows system timer accuracy, usually between 16ms and 4ms.</param>
            <param name="mode"></param>
            <param name="resetCounter">If set to <c>true</c> the frame counter will be reset.</param>
            <param name="enabled">If set to <c>true</c> the timer runs.</param>
            <param name="lastPeriod">Last measured period time in milliseconds.</param>
            <returns>Observable of a TimerClock that can be used as frame clock input for animation nodes.</returns>
        </member>
        <member name="E:VL.Lib.Reactive.BusyWaitTimerObservable.Started">
            <summary>
            Occurs when the Timer has started;
            </summary>
        </member>
        <member name="E:VL.Lib.Reactive.BusyWaitTimerObservable.Stopped">
            <summary>
            Occurs when the Timer has stopped;
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.#ctor">
            <summary>
            Initializes a new instance of the Timer class.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Start">
            <summary>
            Starts the timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
            <exception cref="T:VL.Lib.Reactive.TimerStartException">
            The timer failed to start.
            </exception>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Stop">
            <summary>
            Stops timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.Period">
            <summary>
            Gets or sets the time between Tick events.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>   
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.Mode">
            <summary>
            Gets the timer mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.IsRunning">
            <summary>
            Gets a value indicating whether the Timer is running.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.BusyWaitTimerObservable.Now">
            <summary>
            Returns the time since the timer was created.
            Internally uses the .NET Stopwatch.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.BusyWaitTimerObservable.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.MultimediaTimerObservable">
            <summary>
            Timer using the systems multimedia timer with millisecond accuracy on a high proiority thread. Experimental, you should only create one if it...
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Update(System.Single@,System.Int32,VL.Lib.Reactive.TimerMode,System.Boolean,System.Boolean)">
            <summary>
            Updates the timer properties.
            </summary>
            <param name="period">The period time in milliseconds.</param>
            <param name="mode"></param>
            <param name="resetCounter">If set to <c>true</c> the frame counter will be reset.</param>
            <param name="enabled">If set to <c>true</c> the timer runs.</param>
            <param name="lastPeriod">Last measured period time in milliseconds.</param>
            <returns>Observable of a TimerClock that can be used as frame clock input for animation nodes.</returns>
        </member>
        <member name="E:VL.Lib.Reactive.MultimediaTimerObservable.Started">
            <summary>
            Occurs when the Timer has started;
            </summary>
        </member>
        <member name="E:VL.Lib.Reactive.MultimediaTimerObservable.Stopped">
            <summary>
            Occurs when the Timer has stopped;
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.#cctor">
            <summary>
            Initialize class.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.#ctor">
            <summary>
            Initializes a new instance of the Timer class.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Start">
            <summary>
            Starts the timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
            <exception cref="T:VL.Lib.Reactive.TimerStartException">
            The timer failed to start.
            </exception>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Stop">
            <summary>
            Stops timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Period">
            <summary>
            Gets or sets the time between Tick events.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>   
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Mode">
            <summary>
            Gets the timer mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.IsRunning">
            <summary>
            Gets a value indicating whether the Timer is running.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Now">
            <summary>
            Returns the time since the timer was created.
            Internally uses the .NET Stopwatch.
            </summary>
        </member>
        <member name="P:VL.Lib.Reactive.MultimediaTimerObservable.Capabilities">
            <summary>
            Gets the timer capabilities.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.MultimediaTimerObservable.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.TimerMode">
            <summary>
            Defines constants for the multimedia Timer's event types.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.TimerMode.OneShot">
            <summary>
            Timer event occurs once.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.TimerMode.Periodic">
            <summary>
            Timer event occurs periodically.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.TimerCaps">
            <summary>
            Represents information about the multimedia Timer's capabilities.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.TimerCaps.periodMin">
            <summary>
            Minimum supported period in milliseconds.
            </summary>
        </member>
        <member name="F:VL.Lib.Reactive.TimerCaps.periodMax">
            <summary>
            Maximum supported period in milliseconds.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.TimerStartException">
            <summary>
            The exception that is thrown when a timer fails to start.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.TimerStartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TimerStartException class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
        </member>
    </members>
</doc>
