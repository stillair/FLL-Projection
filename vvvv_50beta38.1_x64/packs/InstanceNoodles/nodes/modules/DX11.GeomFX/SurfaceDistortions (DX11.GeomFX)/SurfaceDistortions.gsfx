#include <packs\InstanceNoodles\nodes\modules\Common\InstanceNoodles.fxh>
#include "..\..\Common\UV.fxh"
#include "SurfaceInterface.fxh"

StructuredBuffer<float> iidb;
float strength = 1;
StructuredBuffer<float> strengthBuffer;
iGeomIndex strengthIndexing <string linkclass="Instance,Primitive,Vertex";>;

float4 pD;
StructuredBuffer<float> p1B;
StructuredBuffer<float> p2B;
StructuredBuffer<float> p3B;
StructuredBuffer<float> p4B;

iUVMode uvMode <string linkclass="PlanarXY,PlanarXZ,PlanarZY,";>;

float2 surfaceScaleDefault =1;
float2 surfaceOffsetDefault;
StructuredBuffer<float2> surfaceScaleBuffer;
StructuredBuffer<float2> surfaceOffsetBuffer;

float3x3 lookat(float3 dir,float3 up=float3(0,1,0)){float3 z=normalize(dir);float3 x=normalize(cross(up,z));float3 y=normalize(cross(z,x));return float3x3(x,y,z);} 


float eps = 0.00001;

struct VS_IN
{
	float4 PosO:POSITION;
	float4 TexCd:TEXCOORD0;
	float3 Norm:NORMAL0;
	uint vid : SV_VertexID ;
};

struct VS_OUT
{
	float4 Pos:POSITION;
	float3 Norm:NORMAL0;
	float2 TexCd:TEXCOORD0;
};

VS_OUT VS(VS_IN In)
{
	VS_OUT Out=(VS_OUT)0;
	uint iid = iidb[In.vid];
	float3 pos=In.PosO.xyz;
	float3 norm = In.Norm;
	float2 tc = In.TexCd;
	float amount = bLoad(strengthBuffer, strength, strengthIndexing.Get(iid, floor(In.vid/3), In.vid));
	float4 par;
	par.x = bLoad(p1B, pD.x, iid);
	par.y = bLoad(p2B, pD.y, iid);
	par.z = bLoad(p3B, pD.z, iid);
	par.w = bLoad(p4B, pD.w, iid);
	
	float3x3 lkt=lookat(norm);
	float3 v1=float3(1,0,0);
	float3 v2=float3(0,0,1);
	v1=normalize(mul(v1,(lkt)));
	v2=normalize(cross(norm,v1));

	float3 p0 = pos;
	float3 p1 = p0+v1*eps;
	float3 p2 = p0+v2*eps;
	
	float2 uv0, uv1, uv2;
	float2 scale = bLoad(surfaceScaleBuffer, surfaceScaleDefault, iid);
	float2 offset = bLoad(surfaceOffsetBuffer, surfaceOffsetDefault, iid);
	
	uv0 = uvMode.Map(p0,0,0)*scale+offset;
	uv1 = uvMode.Map(p1,0,0)*scale+offset;
	uv2 = uvMode.Map(p2,0,0)*scale+offset;
	pos += amount * (SurfaceType.Get(uv0.x, uv0.y, par)- p0);
	p1 += amount * (SurfaceType.Get(uv1.x, uv1.y, par) - p1);
	p2 += amount * (SurfaceType.Get(uv2.x, uv2.y, par) -p2);
	v1=normalize(p1-pos);
	v2=normalize(p2-pos);
	
	Out.Pos = float4(pos,1);
	Out.Norm = normalize(cross(v1,v2));
	Out.TexCd = tc;
	
	return Out;
}


[maxvertexcount(3)]
void GS(triangle VS_OUT In[3], inout TriangleStream<VS_OUT> GSOut)
{
	VS_OUT o;
	for(int i=0;i<3;i++)
	{
		o=In[i];
		GSOut.Append(o);
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO(CompileShader(gs_5_0, GS()), "POSITION.xyz;NORMAL.xyz;TEXCOORD0.xy" );;


technique10 Deform
{
    pass P0
    {
        SetVertexShader(CompileShader(vs_5_0, VS()));
    	SetGeometryShader( CompileShader( gs_5_0, GS() ) );
        SetGeometryShader(StreamOutGS);
    }  
}


