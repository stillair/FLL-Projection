//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
float2 R:TARGETSIZE;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

cbuffer controls:register(b0){
	float4x4 tTex <string uiname="Transform";>;
	float4 Color1 <bool color=true;> =float4(0,0,0,1);
	float4 Color2 <bool color=true;> =1;
	float Gamma <float uimin=0.0;float uimax=1.0;> =0.5;
	float2 BorderSize <float uimin=0.0;float uimax=.5;> =0.1;	
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,input.uv);
	return c;
}

float4 pSMOOTH(psInput input):SV_TARGET{
	float4 cx,cy,col=0;
	
	float fx = 1;
	if (input.uv.x < BorderSize.x) fx = input.uv.x / BorderSize.x;
	else if (input.uv.x > 1 - BorderSize.x) fx = (1 - input.uv.x) / BorderSize.x ;
	float fy = 1;
	if (input.uv.y < BorderSize.y) fy = input.uv.y / BorderSize.y;
	else if (input.uv.y > 1 - BorderSize.y) fy = (1 - input.uv.y) / BorderSize.y ;
	
	float g=Gamma/(1.00001-Gamma);
	
	fx=smoothstep(0,1,fx);
	fx=pow(fx,g);
	cx=lerp(Color1,Color2,fx);
	
	fy=smoothstep(0,1,fy);
	fy=pow(fy,g);
	cy=lerp(Color1,Color2,fy);
	
	col = cx*cy;
    return col;
}


technique10 SmoothBorder
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,pSMOOTH()));
	}
}



