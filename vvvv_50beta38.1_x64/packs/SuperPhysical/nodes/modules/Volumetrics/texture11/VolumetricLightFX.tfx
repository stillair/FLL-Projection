SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=BORDER;AddressV=BORDER;};
SamplerState s1 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=WRAP;AddressV=WRAP;};

float2 R:TARGETSIZE;

Texture2DArray shadowMaps <string uiname="shadowMaps";>;
Texture2D depthMap <string uiname="depthMap";>;
Texture2D noiseTex <string uiname="noise";>;

StructuredBuffer <float4> LightColor;
Texture2DArray lightMap <string uiname="LightMap";>;

float4x4 tVI;
float4x4 tPI;
float4x4 tP;
float4x4 viewPortTransforms <bool uvspace = true;>;

StructuredBuffer <float> farPlane;
StructuredBuffer <float3> lPos;
StructuredBuffer <uint> LightType;
StructuredBuffer <float> lightintensity;

float fade;
float3 volPos = float3(0,0,0);
float volSize = 1;

static const float G_SCATTERING = -.2;
static const float PI = 3.14159265f;

uint NB_STEPS = 32;

StructuredBuffer <float4x4> lightVP;

uint lightCount = 0;

float4 UVZtoVIEW(float2 UV,float z){
	float4 p=mul(float4(UV.x*2-1,1-2*UV.y,0,1.0),tPI);
	float ld = tP._43 / (z - tP._33);
	p=float4(p.xy*ld,ld,1.0);
	return p ; 
}
float4 UVZtoWORLD(float2 UV,float z){
	return mul(UVZtoVIEW(UV,z),tVI); 
}


float3 UVtoEYE(float2 UV){
	return normalize( mul(float4(mul(float4((UV.xy*2-1)*float2(1,-1),0,1),tPI).xy,1,0),tVI).xyz);
}
	// Mie scaterring approximated with Henyey-Greenstein phase function.
	float ComputeScattering(float lightDotView)
	{
	float result = 1.0f - G_SCATTERING /* * G_SCATTERING */;
	result *= result;
	result /= (4.0f * PI * pow(abs(1.0f + G_SCATTERING * G_SCATTERING - (2.0f * G_SCATTERING) * lightDotView), 1.5f));
	return result;
	}


//float fac;
float4 VolumetricLight(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	
	float2 vieportUVs = mul(float4(x.x,x.y,0,1),viewPortTransforms).xy;
	float3 endRayPos =  UVZtoWORLD(vieportUVs,depthMap.Sample(s0,x).r).xyz;
	
	
	// Ray Origin
	float3 startPos = tVI[3].xyz ;
	// Ray Direction
	float3 rayDir = UVtoEYE(vieportUVs);
	
	float stepLength = volSize * 2 / NB_STEPS; // ????;

	float3 steppy = rayDir * stepLength;

 	// offset of outside of volume. todo: lerp on border?
	if(length(startPos - volPos) >= volSize * 1) startPos +=  (rayDir * (length(volPos-startPos) - volSize * .5)); // offset in z

	
	startPos += steppy * noiseTex.Sample(s0,x).r;
	
	float3 currentPos = startPos;

	float3 accumFog = 0.0f.xxx;
	float  shadowMapValue = 0;
	float4 worldInShadowCameraSpace;

	float distFactor;
	float3 lightToObject;

	float3 lightDir = 0;
	float3 spotTex = 1;
	uint shadowCounter = 0;
	uint lightCounter = 0;
	float4 frustrum;
	
	for (uint i = 0; i < NB_STEPS; i++)
	{	
		if(length(currentPos - volPos) > volSize * 1) break;
		if ( length(tVI[3].xyz-endRayPos) - length(tVI[3].xyz-(currentPos))  < 0 ) break;
	
//		if((currentPos*rayDir).z > (endRayPos*rayDir).z) break;

		shadowCounter = 0;
		lightCounter = 0;
		for (uint j = 0; j < lightCount; j++)
		{
			
			bool shadowed = false;
			
			float4x4 LVP = 0; 
			
			switch(LightType[j]){
				case 0:
				
					
						LVP = (lightVP[j]); 
			
						lightDir = float3(LVP._13, LVP._23, LVP._33);
						
						worldInShadowCameraSpace = mul(float4(currentPos, 1.0f), LVP);
						worldInShadowCameraSpace /= worldInShadowCameraSpace.w;
						
						frustrum =  worldInShadowCameraSpace / 2.0f + 0.5f;
								
						if((saturate(frustrum.x ) == frustrum.x) && (saturate(frustrum.y) == frustrum.y)
						&& (saturate(frustrum.z ) == frustrum.z)){	
							
						
							spotTex = worldInShadowCameraSpace.z > 0; 
	
					
							shadowMapValue = shadowMaps.SampleLevel(s0, float3((worldInShadowCameraSpace.x + 1) * .5, (-worldInShadowCameraSpace.y + 1) * .5, j), 0).r;
							
							if(shadowMapValue.r <= worldInShadowCameraSpace.z) shadowed = true;
							
						}else{
							shadowed = true;
						}
				
						lightCounter++;
				
						break;
				case 1:
				
						LVP = (lightVP[j]); 
			
						lightDir = float3(LVP._13, LVP._23, LVP._33);
						
						worldInShadowCameraSpace = mul(float4(currentPos, 1.0f), LVP);
						worldInShadowCameraSpace /= worldInShadowCameraSpace.w;
				
						frustrum =  worldInShadowCameraSpace / 2.0f + 0.5f;
								
						if((saturate(frustrum.x ) == frustrum.x) && (saturate(frustrum.y) == frustrum.y)
						&& (saturate(frustrum.z ) == frustrum.z)){
							
						
							uint tXS,tYS,mS;
							lightMap.GetDimensions(tXS,tYS,mS);
							if(tXS+tYS > 4) spotTex = lightMap.SampleLevel(s0, float3((worldInShadowCameraSpace.x + 1) * .5,(-worldInShadowCameraSpace.y + 1) * .5, j),0).rgb;
							else if(tXS+tYS < 4) spotTex = smoothstep(1, 0, saturate(length(worldInShadowCameraSpace.xy)));
							
							shadowMapValue = shadowMaps.SampleLevel(s0, float3((worldInShadowCameraSpace.x + 1) * .5, (-worldInShadowCameraSpace.y + 1) * .5, j), 0).r;
							
							if(shadowMapValue.r <= worldInShadowCameraSpace.z && shadowMapValue.r != 0) shadowed = true;
					
								
						} else{
							shadowed = true;
						}
				
						lightCounter++;	
				
						break;
				case 2:
						spotTex = 1;
				
						float inFrustrumCounter = 0;
				
						for (uint k = 0; k < 6; k++){
							
							inFrustrumCounter++;
							LVP = (lightVP[k+shadowCounter*6+lightCounter]); 
				
							lightDir = float3(LVP._13, LVP._23, LVP._33);
							
							worldInShadowCameraSpace = mul(float4(currentPos, 1.0f), LVP);
							worldInShadowCameraSpace /= worldInShadowCameraSpace.w;
							
							frustrum =  worldInShadowCameraSpace / 2.0f + 0.5f;
								
							if((saturate(frustrum.x ) == frustrum.x) && (saturate(frustrum.y) == frustrum.y)
							&& (saturate(frustrum.z ) == frustrum.z)){
								
							
								shadowMapValue = shadowMaps.SampleLevel(s0, float3((worldInShadowCameraSpace.x + 1) * .5, (-worldInShadowCameraSpace.y + 1) * .5, k+shadowCounter*6+lightCounter), 0).r;
								
								if(shadowMapValue.r <= worldInShadowCameraSpace.z && shadowMapValue.r != 0)	shadowed = true;

								if(shadowed) break;
							}
						}
				
						shadowCounter++;
						break;
			}

			
			if (!shadowed)
			{	
				distFactor =  pow(saturate( farPlane[j] * fade - length(currentPos - lPos[j])), 1);
				accumFog   += ComputeScattering(dot(rayDir, lightDir)).r * distFactor * lightintensity[j] * stepLength * spotTex.rgb * LightColor[j].rgb * 10;
			}
			
		}

			currentPos += steppy /* NB_STEPS */;		
	}
	
	accumFog ;

	
	return float4(accumFog,currentPos.z);

}

technique10 Volumetric_Light{
	pass P1<string format="R16G16B16A16_float";>{
		SetPixelShader(CompileShader(ps_5_0, VolumetricLight()));
		
	}
}